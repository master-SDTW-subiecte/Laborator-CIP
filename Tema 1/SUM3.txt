#include<iostream>
#include<mpi.h>
#include<stdlib.h>
using namespace std;

#define N 4


int main(int argc, char **argv)
{
	MPI_Init(&argc, &argv);

	int p, rank;

	MPI_Comm_size(MPI_COMM_WORLD, &p);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	MPI_Status status;

	int n = 8;
	int m = 3;

	int A[] = {0, 1, 2, 3, 4, 5, 6, 7 };

	int q = 2;
	int r = 1 << (m - q);

	int s = 0;

	for (int i = 0; i <= (1 << (m - q)) - 1; ++i)
	{
		s = s + A[i*(1 << q) + rank];
	}

	int mask = 0;
	for (int i = 0; i <= q - 1; ++i)
	{
		if ((rank & mask) == 0)
		{

			if ((rank & (1 << i)) == 0)
			{
				int source = rank ^ (1 << i);
				int val = 0;
				MPI_Recv(&val, 1, MPI_INT, source, 0, MPI_COMM_WORLD, &status);
				s = s + val;
			}
			else
			{
				int destination = rank ^ (1 << i);
				MPI_Send(&s, 1, MPI_INT, destination, 0, MPI_COMM_WORLD);
			}

		}

		mask = mask ^ (1 << i);
	}

	if (rank == 0)
	{
		printf("\n Suma elementelor este %d\n", s);
	}

	MPI_Finalize();
	return 0;
}