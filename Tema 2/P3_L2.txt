#include<iostream>
#include<mpi.h>
using namespace std;

#define N 3

struct _point { 
	int x, y, z;
};


int main(int argc, char ** argv) {
	int rank, size;

	int i;
	MPI_Datatype simpleStruct, vectorType;
	MPI_Status stat;
	struct _point test[N*N];
	MPI_Init(&argc, &argv);

	int stride = 3;

	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	MPI_Type_contiguous(N, MPI_INT, &simpleStruct);

	MPI_Type_commit(&simpleStruct);
	MPI_Type_vector(N*N, 1, N, simpleStruct, &vectorType);
	MPI_Type_commit(&vectorType);
	if (0 == rank)
	{
		for (i = 0; i<N*N; ++i)
		{
			test[i].x = i + 1;
			test[i].y = i + 2;
			test[i].z = i + 3;
		}

		MPI_Send(test, 1, vectorType, 1, 99, MPI_COMM_WORLD);
	}
	else
	{
		if (1 == rank)
		{
			MPI_Recv(test, 1, vectorType, 0, 99, MPI_COMM_WORLD, &stat);

			for (i = 0; i<N; ++i) {
				//printf("%d\n", test[stride*i].x);
				printf("%d\n", test[stride*i].y);
				//printf("%d\n", test[stride*i].z);
			}
		}
	}
	MPI_Type_free(&vectorType);
	MPI_Type_free(&simpleStruct);
	MPI_Finalize();
	return 0;
}